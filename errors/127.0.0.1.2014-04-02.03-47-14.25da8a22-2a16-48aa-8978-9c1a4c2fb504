(dp1
S'output'
p2
S"<type 'exceptions.AttributeError'> 'Row' object has no attribute 'sender'"
p3
sS'layer'
p4
S'/home/karan/web2py/web2py/applications/itws/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nfrom datetime import datetime,date\nimport time\ndef download():\n\treturn response.download(request,db)\ndef link():\n\treturn response.download(request,db,attachment=False)\ndef faq():\n    if session.login!="login":\n        session.login="login1"\n        session.uname=""\n    return dict(check1=session.login,check2=session.uname,check3=session.photo)\ndef tables(): \n   return dict(tables=db().select(db.persons.ALL))\ndef helloa():\n\treturn dict();\n\ndef echo():\n\treturn request.vars\ndef validater():\n    session.states="not"\n    rows=db(db.persons.id>0).select()\n    for i in rows:\n\t    if(i.name==session.uname):\n\t\t    if(i.password==session.passwo):\n\t\t\t    session.states="ok"\ndef hello1():\n   \n    if session.login == "login1":\n\tresponse.flash = T("login to continue")\n    session.state = "login"\n\n#for changing the location of any date specified by user\n    if request.vars.update:\n\tplace = request.vars["place"]\n\tfdate = request.vars["fromdate"]\n\tftime = request.vars["fromtime"]\n\ttdate = request.vars["todate"]\n\tttime = request.vars["totime"]\n\tif place=="" or fdate=="" or ftime=="" or tdate=="" or ttime=="":\n\t\tresponse.flash = T("Fill in the details correctly")\n\telse:\n\t\tif place is not None:\n\t\t\tresponse.flash = T("Your changes stored")\n\t\t\tdb.loca.insert(username=session.uname,place=place,fdate=fdate,ftime=ftime,tdate=tdate,ttime=ttime)\n\n#for changing the profile pic\n    image_form = FORM(INPUT(_name=\'image_file\',_type=\'file\'))\n    if image_form.accepts(request.vars,formname=\'image_form\'):\n\timage = db.persons.photo.store(image_form.vars.image_file.file,image_form.vars.image_file.filename)\n\tid = db(db.persons.name==session.uname).update(photo=image)\n\tresponse.flash = T("Your Profile Pic Changed.Please Logout to see changes")\n    if session.state=="logout":\n\tsession.state="login"\n#for initializing the login state\n#login1 refers to logout\n#login refers to logged in\n\n    if session.login!="login":\n        session.login="login1"\n        session.uname=""\n\n#part for logging out\n\n    session.state=request.get_vars["a"]\n    if session.state == "logout":\n\tresponse.flash = T("logout successfull")\n\tresponse.mess="notput"\n\tsession.login = "login1"\n\tsession.logout = "true"\n\tsession.state2 = "logout"\n\tredirect(URL("hello1"))\n\n#for logging in\n\n    if request.vars.login1:\n\tsession.uname = request.vars["user"]\n\tsession.passwo = request.vars["pass"]\n\n#for checking the credentials\n\t\n\tvalidater()\n\n\n#redirecting user to his page\n\n\tif session.states == "ok":\n\t\trows = db(db.persons.name == session.uname).select()\n\t\tfor i in rows:\n\t\t\tsession.photo = i.photo\n\t\t\tsession.designation = i.designation\n\t\trows1 = db(db[session.designation].name == session.uname).select()\n\t\tfor i in rows1:\n\t\t\tsession.sec = i.sec\n\t\tsession.times = datetime.today().time()\n\t\t#print session.times\n\t\t#print session.sec\n\t\tsession.days = time.strftime("%A")\t\n\t\trows2 = db(db[session.sec].dayn == session.days).select()\n\t\trows3 = db(db.periods.id > 0).select()\n\t\t\n#for displaying the messages\n\t\trows4 = db(db.messages.Receiver == session.uname).select()\n\t\tsession.messages = ""\n\t\tfor i in rows4:\n\t\t\tsession.messages += i.sender + "sent a message " + i.Info\t\t\n\n#for taking the current period of user\n\t\tsession.periodname = None\n\t\tfor i in rows3:\n\t\t\tif i.T1 < session.times and i.T2 > session.times:\n\t\t\t\tsession.periodname = i.pname\n\t\tif session.periodname == "labs":\n\t\t\tsession.periodtype = "lab"\n\t\telif session.periodname is not None:\n\t\t\tsession.periodtype = "class"\n\t\tif session.periodname is not None:\n\t\t\tsession.var = rows2[0][session.periodname]\n\t\t\tif session.var is not "-":\n\t\t\t\tsession.var = session.var.split()\n\t\t\t\tsession.period = session.var[0]\n\t\t\t\tprint session.period\n\t\t\t\tl = len(session.var)\n\t\t\t\tsession.schedule = ""\n\t\t\t\tfor i in range(1,l):\n\t\t\t\t\tsession.schedule = session.schedule + session.var[i] + " "\n\t\t\telse:\n\t\t\t  \tsession.period = None\n\t\t\t\t\t\n\t\telse:\n\t\t\tsession.period = None\n\n#for removing the outdated places of all users\n\tcurrdate = time.strftime("%x")\n\tcurrtime = time.strftime("%X")\n\tcurrdate = currdate[0:6]\n\tcurryear = time.strftime("%Y")\n\tcurrdate = currdate + curryear\n        db(db.loca.tdate < currdate).delete()\n    \n#for retrieving the specified location assigned by user\n\tsession.location = None\n\tplaces = db(db.loca.username == session.uname).select()\n\tfor i in places:\n    \t\tif i.fdate < currdate and i.tdate > currdate:\n\t\t    session.location = i.place\n\t\telif i.fdate == currdate or i.tdate == currdate:\n\t\t    if i.fdate == currdate:\n\t\t        if i.ftime < currtime:\n\t\t\t    session.location = i.place\n\t\t    else:\n\t\t        if i.ttime > currtime:\n\t\t\t    session.location = i.place\n\n#flash messages\n\t\n\tif session.states=="ok":\n\t   response.flash=T("login successfull")\n\t   session.login = "login"\n\telse:\n\t   response.flash=T("wrong username/password")\n    return dict(check1=session.login,check2=session.uname,check3=session.photo,check4=session.period,check5=session.schedule \\\n,check6=session.periodtype,check7=session.location,check8 = session.messages)\n\n\n\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    if session.login!="login":\n        session.login="login1"\n        session.uname=""\n    response.flash = T("Welcome to IIIT tracker!")\n    return dict(message=T(\'Hello IIIT\'),check1=session.login,check2=session.uname,check3=session.photo,check4=session.period)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth(),check1=session.login,check2=session.uname)\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud(),check1=session.login,check2=session.uname)\n\nresponse._vars=response._caller(hello1)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/karan/web2py/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/karan/web2py/web2py/applications/itws/controllers/default.py", line 246, in <module>\n  File "/home/karan/web2py/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/karan/web2py/web2py/applications/itws/controllers/default.py", line 115, in hello1\n    session.messages += i.sender + "sent a message " + i.Info\n  File "/home/karan/web2py/web2py/gluon/dal.py", line 7343, in __getitem__\n    raise ae\nAttributeError: \'Row\' object has no attribute \'sender\'\n'
p11
s.